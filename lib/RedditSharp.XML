<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedditSharp</name>
    </assembly>
    <members>
        <member name="P:RedditSharp.BotWebAgent.TokenValidTo">
            <summary>
            DateTime the token expires.
            </summary>
        </member>
        <member name="M:RedditSharp.BotWebAgent.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            A web agent using reddit's OAuth interface.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The user's password.</param>
            <param name="clientId">Granted by reddit as part of app.</param>
            <param name="clientSecret">Granted by reddit as part of app.</param>
            <param name="redirectUri">Selected as part of app. Reddit will send users back here.</param>
        </member>
        <member name="M:RedditSharp.BotWebAgent.CreateRequest(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:RedditSharp.BotWebAgent.CreateRequest(System.Uri,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:RedditSharp.UserFlairTemplate.Text">
            <summary>
            Flair text.
            </summary>
        </member>
        <member name="P:RedditSharp.UserFlairTemplate.CssClass">
            <summary>
            Flair clss class.
            </summary>
        </member>
        <member name="P:RedditSharp.UserFlairTemplate.TemplateId">
            <summary>
            Flair template id.
            </summary>
        </member>
        <member name="P:RedditSharp.UserFlairTemplate.IsEditable">
            <summary>
            Set to true if this is user editable.
            </summary>
        </member>
        <member name="P:RedditSharp.UserFlairTemplate.FlairPosition">
            <summary>
            Position of the flair left or right.
            </summary>
        </member>
        <member name="T:RedditSharp.Things.LiveUpdateEvent">
            <summary>
            A Reddit Live thread.  https://www.reddit.com/dev/api/#section_live
            </summary>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.AcceptContributorInvite">
            <summary>
            Accept an invite to be a live thread contributor.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.Close">
            <summary>
            Close the live thread.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.DeleteUpdate(RedditSharp.Things.LiveUpdate)">
            <summary>
            Delete an update
            </summary>
            <param name="update">Update to strike</param>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.DeleteUpdate(System.String)">
            <summary>
            Delete an update
            </summary>
            <param name="fullName">Full name of the update to strike</param>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.Edit(System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Edit a live thread.  Set parameters to empty string to clear those fields.  Or null to ignore them on update.
            </summary>
            <param name="title">New Title.</param>
            <param name="description">New Description</param>
            <param name="resources">new Resources</param>
            <param name="nsfw">NSFW flag</param>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.GetContributors">
            <summary>
            Get a list of contributors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.GetDiscussions">
            <summary>
            Get a list of reddit submissions linking to this thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.GetThread">
            <summary>
            Get a list of updates to this live event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.GetInvitedContributors">
            <summary>
            Get invited contributors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.InviteContributor(System.String,RedditSharp.Things.LiveUpdateEvent.LiveUpdateEventPermission)">
            <summary>
            Invite a contributor to the live thread.
            </summary>
            <param name="name">reddit username.</param>
            <param name="permissions">permissions.</param>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.LeaveContributor">
            <summary>
            Abdicate contributorship of a thread.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.RemoveContributor(RedditSharp.Things.RedditUser)">
            <summary>
            Remove a contributor from the live thread.
            </summary>
            <param name="name">RedditUser</param>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.RemoveContributor(System.String)">
            <summary>
            Remove a contributor from the live thread.
            </summary>
            <param name="name">reddit username.</param>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.Report(System.String)">
            <summary>
            Report the live thread.  (Spam by default).
            </summary>
            <param name="reason">one of the following : "spam" (default), "vote-manipulation", "personal-information", "sexualizing-minors", "site-breaking"</param>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.RevokeContributorInvite(RedditSharp.Things.RedditUser)">
            <summary>
            Revoke an outstanding contributor invite.
            </summary>
            <param name="name">reddit username</param>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.RevokeContributorInvite(System.String)">
            <summary>
            Revoke an outstanding contributor invite.
            </summary>
            <param name="name">reddit username</param>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.SetContributorPermissions(RedditSharp.Things.RedditUser,RedditSharp.Things.LiveUpdateEvent.LiveUpdateEventPermission)">
            <summary>
            Set contributor permissions on the live thread.
            </summary>
            <param name="name"></param>
            <param name="permissions">Reddit user</param>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.SetContributorPermissions(System.String,RedditSharp.Things.LiveUpdateEvent.LiveUpdateEventPermission)">
            <summary>
            Set contributor permissions on the live thread.
            </summary>
            <param name="name"></param>
            <param name="permissions">Permissions to set.</param>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.SetInvitedContributorPermissions(RedditSharp.Things.RedditUser,RedditSharp.Things.LiveUpdateEvent.LiveUpdateEventPermission)">
            <summary>
            Set permissions on a contributor who has been invited but has not accepted.
            </summary>
            <param name="name"></param>
            <param name="permissions">Permissions to set.</param>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.SetInvitedContributorPermissions(System.String,RedditSharp.Things.LiveUpdateEvent.LiveUpdateEventPermission)">
            <summary>
            Set permissions on a contributor who has been invited but has not accepted.
            </summary>
            <param name="name"></param>
            <param name="permissions">Permissions to set.</param>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.StrikeUpdate(RedditSharp.Things.LiveUpdate)">
            <summary>
            Strike an update
            </summary>
            <param name="update">Update to strike</param>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.StrikeUpdate(System.String)">
            <summary>
            Strike an update
            </summary>
            <param name="fullName">Full name of the update to strike</param>
        </member>
        <member name="M:RedditSharp.Things.LiveUpdateEvent.Update(System.String)">
            <summary>
            Make an update to the live thread
            </summary>
            <param name="markdown">markdown of the update</param>
        </member>
        <member name="P:RedditSharp.Things.BannedUser.TimeStamp">
            <summary>
            Date the user was banned.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.BannedUser.Note">
            <summary>
            Ban note.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.BannedUser.Name">
            <summary>
            User name.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.BannedUser.Init(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            Initialize.
            </summary>
            <param name="reddit"></param>
            <param name="json"></param>
            <param name="webAgent"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.BannedUser.InitAsync(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            Initialize.
            </summary>
            <param name="reddit"></param>
            <param name="json"></param>
            <param name="webAgent"></param>
            <returns></returns>
        </member>
        <member name="P:RedditSharp.Things.Contributor.Name">
            <summary>
            Contributor name.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Contributor.DateAdded">
            <summary>
            Date contributor was added.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Contributor.Init(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            Initialize.
            </summary>
            <param name="reddit"></param>
            <param name="json"></param>
            <param name="webAgent"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.Contributor.InitAsync(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            Initialize.
            </summary>
            <param name="reddit"></param>
            <param name="json"></param>
            <param name="webAgent"></param>
            <returns></returns>
        </member>
        <member name="P:RedditSharp.Things.ModAction.Action">
            <summary>
            Type of action.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.ModAction.TimeStamp">
            <summary>
            DateTime of the action.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.ModAction.Details">
            <summary>
            Action details.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.ModAction.ModeratorName">
            <summary>
            Name of moderator who performed the action.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.ModAction.TargetAuthorName">
            <summary>
            Target author name of the item against which this moderation action was performed.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.ModAction.TargetThingFullname">
            <summary>
            Target full name of the item against which this moderation action was performed.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.ModAction.TargetThingPermalink">
            <summary>
            Permalink of the item against which this moderation action was performed.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.ModAction.TargetAuthor">
            <summary>
            Author of the item against which this moderation action was performed.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.ModAction.TargetThing">
            <summary>
            Item against which this moderation action was performed.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.ModAction.InitAsync(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            Initialize
            </summary>
            <param name="reddit"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.ModAction.Init(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            Initialize
            </summary>
            <param name="reddit"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.AuthenticatedUser.InitAsync(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            Initialize.
            </summary>
            <param name="reddit"></param>
            <param name="json"></param>
            <param name="webAgent"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.AuthenticatedUser.Init(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            Initialize.
            </summary>
            <param name="reddit"></param>
            <param name="json"></param>
            <param name="webAgent"></param>
            <returns></returns>
        </member>
        <member name="P:RedditSharp.Things.AuthenticatedUser.ModeratorSubreddits">
            <summary>
            Get a <see cref="T:RedditSharp.Listing`1"/> of subreddits moderated by the logged in user.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.AuthenticatedUser.UnreadMessages">
            <summary>
            Get a <see cref="T:RedditSharp.Listing`1"/> of unread messages.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.AuthenticatedUser.ModerationQueue">
            <summary>
            Get a <see cref="T:RedditSharp.Listing`1"/> of items in the Moderation Queue.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.AuthenticatedUser.UnmoderatedLinks">
            <summary>
            Get a <see cref="T:RedditSharp.Listing`1"/> of unmoderated Posts.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.AuthenticatedUser.ModMail">
            <summary>
            Get a <see cref="T:RedditSharp.Listing`1"/> of (old style) modmail.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.AuthenticatedUser.PrivateMessages">
            <summary>
            Get a <see cref="T:RedditSharp.Listing`1"/> of private messages.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.AuthenticatedUser.Inbox">
            <summary>
            Get a <see cref="T:RedditSharp.Listing`1"/> of messages in the inbox.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.AuthenticatedUser.Sent">
            <summary>
            Get a <see cref="T:RedditSharp.Listing`1"/> of sent messages.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.AuthenticatedUser.GetUnmoderatedLinks">
            <summary>
            Get a <see cref="T:RedditSharp.Listing`1"/> of unmoderated links.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.AuthenticatedUser.Modhash">
             <summary>
             User modhash.
             <para>A modhash is a token that the reddit API requires to help prevent CSRF. Modhashes can be 
             obtained via the /api/me.json call or in response data of listing endpoints.  The preferred way
             to send a modhash is to include an X-Modhash custom HTTP header with your requests.</para>
            <para>Modhashes are not required when authenticated with OAuth.</para>
             </summary>
        </member>
        <member name="P:RedditSharp.Things.AuthenticatedUser.HasMail">
            <summary>
            Returns true of the user has mail.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.AuthenticatedUser.HasModMail">
            <summary>
            Returns true of the user has modmail.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Comment.InitAsync(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent,RedditSharp.Things.Thing)">
            <summary>
            Initialize.
            </summary>
            <param name="reddit"></param>
            <param name="json"></param>
            <param name="webAgent"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.Comment.Init(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent,RedditSharp.Things.Thing)">
            <summary>
            Initialize.
            </summary>
            <param name="reddit"></param>
            <param name="json"></param>
            <param name="webAgent"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.Comment.PopulateComments(System.Collections.Generic.IEnumerator{RedditSharp.Things.Thing})">
            <summary>
            Fill the object with comments.
            </summary>
            <param name="things"></param>
            <returns></returns>
        </member>
        <member name="P:RedditSharp.Things.Comment.Author">
            <summary>
            Comment author user name.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Comment.BannedBy">
            <summary>
            Moderator this comment was removed by.  Will be null or empty if the comment has not been removed.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Comment.Body">
            <summary>
            Comment body markdown.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Comment.BodyHtml">
            <summary>
            Comment body html.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Comment.ParentId">
            <summary>
            Id of the parent <see cref="T:RedditSharp.Things.VotableThing"/>.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Comment.Subreddit">
            <summary>
            Parent subreddit name.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Comment.ApprovedBy">
            <summary>
            Moderator this comment was approved by.  Will be null or empty if the comment has not been approved.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Comment.AuthorFlairCssClass">
            <summary>
            Css class of the authors flair.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Comment.AuthorFlairText">
            <summary>
            Text of the authors flair.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Comment.Gilded">
            <summary>
            Number of times this comment has been gilded.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Comment.LinkId">
            <summary>
            Link id.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Comment.LinkTitle">
            <summary>
            Parent link title.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Comment.NumReports">
            <summary>
            Number of reports on this comment.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Comment.IsStickied">
            <summary>
            Returns true if this comment is stickied.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Comment.More">
            <summary>
            More comments.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Comment.Comments">
            <summary>
            Replies to this comment.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Comment.Parent">
            <summary>
            Parent <see cref="T:RedditSharp.Things.VotableThing"/>
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Comment.Shortlink">
            <inheritdoc/>
        </member>
        <member name="M:RedditSharp.Things.Comment.Reply(System.String)">
            <summary>
            Reply to this comment.
            </summary>
            <param name="message">markdown text of the reply.</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.Comment.EditText(System.String)">
            <summary>
            Replaces the text in this comment with the input text.
            </summary>
            <param name="newText">The text to replace the comment's contents</param>        
        </member>
        <member name="M:RedditSharp.Things.Comment.Approve">
            <summary>
            Approve this comment.  Logged in user must be a moderator of parent subreddit.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Comment.Del">
            <summary>
            Delete this comment.    Logged in user must be a moderator of parent subreddit.
            or the Author of this comment.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Comment.IgnoreReports">
            <summary>
            Ignore reports on this comment.    Logged in user must be a moderator of parent subreddit.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Comment.UnIgnoreReports">
            <summary>
            Unignore reports on this comment.    Logged in user must be a moderator of parent subreddit.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Comment.Remove">
            <summary>
            Remove this comment.    Logged in user must be a moderator of parent subreddit.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Comment.RemoveSpam">
            <summary>
            Remove this comment, flagging it as spam.    Logged in user must be a moderator of parent subreddit.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Comment.SetAsRead">
            <summary>
            Mark this comment as read.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.CreatedThing.Init(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initialize
            </summary>
            <param name="reddit"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.CreatedThing.InitAsync(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initialize
            </summary>
            <param name="reddit"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="P:RedditSharp.Things.CreatedThing.Created">
            <summary>
            DateTime when the item was created.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.CreatedThing.CreatedUTC">
            <summary>
            DateTime when the item was created in UTC.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Post.InitAsync(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            Initialize
            </summary>
            <param name="reddit"></param>
            <param name="post"></param>
            <param name="webAgent"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.Post.Init(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            Initialize
            </summary>
            <param name="reddit"></param>
            <param name="post"></param>
            <param name="webAgent"></param>
            <returns></returns>
        </member>
        <member name="P:RedditSharp.Things.Post.AuthorName">
            <summary>
            Name of the author of this post.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.Author">
            <summary>
            Author of this post.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.Comments">
            <summary>
            An array of comments on this post.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.ApprovedBy">
            <summary>
            The moderator who approved this post.  This will be null or empty if the post has not been approved.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.AuthorFlairCssClass">
            <summary>
            Css flair class of the posts author.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.AuthorFlairText">
            <summary>
            Flair text of the posts author.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.BannedBy">
            <summary>
            The moderator who removed this post.  This will be null or empty if the post has not been removed.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.Domain">
            <summary>
            Domain of this post.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.Edited">
            <summary>
            Returns true if this post has been edited by the author.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.IsSelfPost">
            <summary>
            Returns true if this is a self post.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.LinkFlairCssClass">
            <summary>
            Css class of the link flair.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.LinkFlairText">
            <summary>
            Text of the link flair.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.CommentCount">
            <summary>
            Number of comments on this post.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.NSFW">
            <summary>
            Returns true if this post is marked not safe for work.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.Permalink">
            <summary>
            Post permalink.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.SelfText">
            <summary>
            Post self text markdown.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.SelfTextHtml">
            <summary>
            Post self text html.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.Thumbnail">
            <summary>
            Uri to the thumbnail image of this post.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.Title">
            <summary>
            Post title.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.SubredditName">
            <summary>
            Parent subreddit name.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.IsArchived">
            <summary>
            Returns true if this post is archived.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.IsStickied">
            <summary>
            Returns true if the post is sticked.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.Subreddit">
            <summary>
            Parent subreddit.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.Url">
            <summary>
            Post uri.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Post.Reports">
            <summary>
            Number of reports on this post.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Post.Comment(System.String)">
            <summary>
            Comment on this post.
            </summary>
            <param name="message">Markdown text.</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.Post.Approve">
            <summary>
            Approve this post.  Logged in user must be a moderator of parent subreddit.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Post.Remove">
            <summary>
            Remove this post.  Logged in user must be a moderator of parent subreddit.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Post.RemoveSpam">
            <summary>
            Remove this post, flagging it as spam.  Logged in user must be a moderator of parent subreddit.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Post.Del">
            <summary>
            Delete this post.  Logged in user must be post author.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Post.Hide">
            <summary>
            Hide this post.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Post.Unhide">
            <summary>
            Unhide this post.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Post.IgnoreReports">
            <summary>
            Ignore reports on this post.  Logged in user must be a moderator of parent subreddit.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Post.UnIgnoreReports">
            <summary>
            Unignore reports on this post.  Logged in user must be a moderator of parent subreddit.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Post.MarkNSFW">
            <summary>
            Mark this post not safe for work.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Post.UnmarkNSFW">
            <summary>
            Unmark this post not safe for work.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Post.ContestMode(System.Boolean)">
            <summary>
            Set contest mode state.  Logged in user must be a moderator of parent subreddit.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:RedditSharp.Things.Post.StickyMode(System.Boolean)">
            <summary>
            Set sticky state.  Logged in user must be a moderator of parent subreddit.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:RedditSharp.Things.Post.EditText(System.String)">
            <summary>
            Replaces the text in this post with the input text.
            </summary>
            <param name="newText">The text to replace the post's contents</param>
        </member>
        <member name="M:RedditSharp.Things.Post.Update">
            <summary>
            Update this post.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Post.SetFlair(System.String,System.String)">
            <summary>
            Sets your claim
            </summary>
            <param name="flairText">Text to set your flair</param>
            <param name="flairClass">class of the flair</param>
        </member>
        <member name="M:RedditSharp.Things.Post.ListComments(System.Nullable{System.Int32})">
            <summary>
            Get a <see cref="T:RedditSharp.Listing`1"/> of comments.
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.Post.EnumerateComments">
            <summary>
            Enumerate more comments.
            </summary>
            <returns></returns>
        </member>
        <member name="P:RedditSharp.Things.PrivateMessage.Body">
            <summary>
            Message body markdown.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.PrivateMessage.BodyHtml">
            <summary>
            Message body html.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.PrivateMessage.IsComment">
            <summary>
            Returns true if is comment.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.PrivateMessage.Sent">
            <summary>
            DateTime message was sent.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.PrivateMessage.SentUTC">
            <summary>
            DateTime message was sent in UTC.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.PrivateMessage.Destination">
            <summary>
            Destination user or subreddit name.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.PrivateMessage.Author">
            <summary>
            Message author.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.PrivateMessage.Subreddit">
            <summary>
            Subreddit (for comments).
            </summary>
        </member>
        <member name="P:RedditSharp.Things.PrivateMessage.Unread">
            <summary>
            Returns true if the message is unread.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.PrivateMessage.Subject">
            <summary>
            Message subject.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.PrivateMessage.ParentID">
            <summary>
            Parent id.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.PrivateMessage.FirstMessageName">
            <summary>
            full name of the first message in this message chain.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.PrivateMessage.Replies">
            <summary>
            Replies to this message.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.PrivateMessage.Parent">
            <summary>
            Original message
            </summary>
        </member>
        <member name="P:RedditSharp.Things.PrivateMessage.Thread">
            <summary>
            The thread of messages
            </summary>
        </member>
        <member name="M:RedditSharp.Things.PrivateMessage.InitAsync(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            initializes trying to get the messages
            </summary>
            <param name="reddit"></param>
            <param name="json"></param>
            <param name="webAgent"></param>
            <returns>A private message</returns>
        </member>
        <member name="M:RedditSharp.Things.PrivateMessage.Init(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            initializes trying to get the messages
            </summary>
            <param name="reddit"></param>
            <param name="json"></param>
            <param name="webAgent"></param>
            <returns>A private message</returns>
        </member>
        <member name="M:RedditSharp.Things.PrivateMessage.SetAsRead">
            <summary>
            Mark the message read
            </summary>
        </member>
        <member name="M:RedditSharp.Things.PrivateMessage.SetAsReadAsync">
            <summary>
            Mark the message as read.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.PrivateMessage.Reply(System.String)">
            <summary>
            Reply to the message
            </summary>
            <param name="message">Markdown text.</param>
        </member>
        <member name="M:RedditSharp.Things.PrivateMessage.ReplyAsync(System.String)">
            <summary>
            Reply to the message async.
            </summary>
            <param name="message">Markdown text</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.RedditUser.InitAsync(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            Initialize
            </summary>
            <param name="reddit"></param>
            <param name="json"></param>
            <param name="webAgent"></param>
            <returns>A reddit user</returns>
        </member>
        <member name="M:RedditSharp.Things.RedditUser.Init(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            Initialize
            </summary>
            <param name="reddit"></param>
            <param name="json"></param>
            <param name="webAgent"></param>
            <returns>A reddit user</returns>
        </member>
        <member name="P:RedditSharp.Things.RedditUser.Name">
            <summary>
            Reddit username.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.RedditUser.HasGold">
            <summary>
            Returns true if the user has reddit gold.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.RedditUser.IsModerator">
            <summary>
            Returns true if the user is a moderator of any subreddit.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.RedditUser.LinkKarma">
            <summary>
            Total link karma of the user.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.RedditUser.CommentKarma">
            <summary>
            Total comment karma of the user.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.RedditUser.Created">
            <summary>
            Date the user was created.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.RedditUser.Overview">
            <summary>
            Return the users overview.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.RedditUser.LikedPosts">
            <summary>
            Return a <see cref="T:RedditSharp.Listing`1"/> of posts liked by the logged in user.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.RedditUser.DislikedPosts">
            <summary>
            Return a <see cref="T:RedditSharp.Listing`1"/> of posts disliked by the logged in user.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.RedditUser.Comments">
            <summary>
            Return a <see cref="T:RedditSharp.Listing`1"/> of comments made by the user.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.RedditUser.Posts">
            <summary>
            Return a <see cref="T:RedditSharp.Listing`1"/> of posts made by the user.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.RedditUser.SubscribedSubreddits">
            <summary>
            Return a list of subscribed subreddits for the logged in user.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.RedditUser.GetOverview(RedditSharp.Things.Sort,System.Int32,RedditSharp.Things.FromTime)">
            <summary>
            Get a listing of comments and posts from the user sorted by <paramref name="sorting"/>, from time <paramref name="fromTime"/>
            and limited to <paramref name="limit"/>.
            </summary>
            <param name="sorting">How to sort the comments (hot, new, top, controversial).</param>
            <param name="limit">How many comments to fetch per request. Max is 100.</param>
            <param name="fromTime">What time frame of comments to show (hour, day, week, month, year, all).</param>
            <returns>The listing of comments requested.</returns>
        </member>
        <member name="M:RedditSharp.Things.RedditUser.GetComments(RedditSharp.Things.Sort,System.Int32,RedditSharp.Things.FromTime)">
            <summary>
            Get a listing of comments from the user sorted by <paramref name="sorting"/>, from time <paramref name="fromTime"/>
            and limited to <paramref name="limit"/>.
            </summary>
            <param name="sorting">How to sort the comments (hot, new, top, controversial).</param>
            <param name="limit">How many comments to fetch per request. Max is 100.</param>
            <param name="fromTime">What time frame of comments to show (hour, day, week, month, year, all).</param>
            <returns>The listing of comments requested.</returns>
        </member>
        <member name="M:RedditSharp.Things.RedditUser.GetPosts(RedditSharp.Things.Sort,System.Int32,RedditSharp.Things.FromTime)">
            <summary>
            Get a listing of posts from the user sorted by <paramref name="sorting"/>, from time <paramref name="fromTime"/>
            and limited to <paramref name="limit"/>.
            </summary>
            <param name="sorting">How to sort the posts (hot, new, top, controversial).</param>
            <param name="limit">How many posts to fetch per request. Max is 100.</param>
            <param name="fromTime">What time frame of posts to show (hour, day, week, month, year, all).</param>
            <returns>The listing of posts requested.</returns>
        </member>
        <member name="M:RedditSharp.Things.RedditUser.GetSaved(RedditSharp.Things.Sort,System.Int32,RedditSharp.Things.FromTime)">
            <summary>
            Get a listing of comments and posts saved by the user sorted by <paramref name="sorting"/>, from time <paramref name="fromTime"/>
            and limited to <paramref name="limit"/>.
            </summary>
            <param name="sorting">How to sort the comments (hot, new, top, controversial).</param>
            <param name="limit">How many comments to fetch per request. Max is 100.</param>
            <param name="fromTime">What time frame of comments to show (hour, day, week, month, year, all).</param>
            <returns>The listing of posts and/or comments requested that the user saved.</returns>
        </member>
        <member name="M:RedditSharp.Things.RedditUser.ToString">
            <inheritdoc/>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.Wiki">
            <summary>
            Subreddit Wiki
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.Created">
            <summary>
            Date the subreddit was created.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.Description">
            <summary>
            Subreddit description.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.DescriptionHTML">
            <summary>
            Subreddit description html.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.DisplayName">
            <summary>
            Subreddit display name.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.HeaderImage">
            <summary>
            Header image.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.HeaderTitle">
            <summary>
            Header title.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.NSFW">
            <summary>
            Returns true of the subreddit is marked for users over 18.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.PublicDescription">
            <summary>
            Public description of the subreddit.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.Subscribers">
            <summary>
            Total subscribers to the subreddit.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.ActiveUsers">
            <summary>
            Current active users .
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.Title">
            <summary>
            Subreddit title.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.Url">
            <summary>
            Subreddit url.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.UserIsModerator">
            <summary>
            Property determining whether the current logged in user is a moderator on this subreddit.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.ModPermissions">
            <summary>
            Property giving the moderator permissions of the logged in user on this subreddit.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.UserIsBanned">
            <summary>
            Property determining whether the current logged in user is banned from the subreddit.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.GetTop(RedditSharp.Things.FromTime)">
            <summary>
            Top of the subreddit at a timeperiod
            </summary>
            <param name="timePeriod">Timeperiod you want to start at <seealso cref="T:RedditSharp.Things.FromTime"/></param>
            <returns>The top of the subreddit from a specific time</returns>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.Posts">
            <summary>
            All posts on a subredit
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.Comments">
            <summary>
            Comments for a subreddit, all of them, irrespective of replies and what it is replying to
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.New">
            <summary>
            Posts on the subreddit/new
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.Hot">
            <summary>
            Posts on the front page of the subreddits
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.Rising">
            <summary>
            List of rising posts
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.Controversial">
            <summary>
            List of Controversial posts
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.Gilded">
            <summary>
            List of gilded things
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.ModQueue">
            <summary>
            List of items in the mod queue
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.UnmoderatedLinks">
            <summary>
            Links a moderator hasn't checked
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.Search(System.String,RedditSharp.Sorting,RedditSharp.TimeSorting)">
            <summary>
            Search using specific terms from a specified time to now
            </summary>
            <param name="terms">Terms you want to search for</param>
            <param name="sortE">Sort the way you want to, see <see cref="T:RedditSharp.Sorting"/></param>
            <param name="timeE">Time sorting you want to see</param>
            <returns>A list of posts</returns>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.Search(System.DateTime,System.DateTime,RedditSharp.Sorting)">
            <summary>
            Search for a list of posts from a specific time to another time
            </summary>
            <param name="from">Time to begin search</param>
            <param name="to">Time to end search at</param>
            <param name="sortE">Sort of the objects you want to have it in</param>
            <returns>A list of posts in the range of time/dates in a specific order</returns>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.Settings">
            <summary>
            Settings of the subreddit, as best as possible
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.UserFlairTemplates">
            <summary>
            Get an array of the available user flair templates for the subreddit
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.Stylesheet">
            <summary>
            Get the subreddit stylesheet.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.Moderators">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the subreddit moderators.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.UserNotes">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of toolbox user notes.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.Contributors">
            <summary>
            Get a <see cref="T:RedditSharp.Listing`1"/> of contributors.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.BannedUsers">
            <summary>
            Get a <see cref="T:RedditSharp.Listing`1"/> of banned users.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.Modmail">
            <summary>
            Subreddit modmail.
            <para/>
             When calling <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/> make sure to take replies into account!
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.InitAsync(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            Initialize
            </summary>
            <param name="reddit"></param>
            <param name="json"></param>
            <param name="webAgent"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.Init(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            Initialize
            </summary>
            <param name="reddit"></param>
            <param name="json"></param>
            <param name="webAgent"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.GetRSlashAll(RedditSharp.Reddit)">
            <summary>
            http://www.reddit.com/r/all
            </summary>
            <param name="reddit">reddit, to help personalization</param>
            <returns>http://www.reddit.com/r/all</returns>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.GetFrontPage(RedditSharp.Reddit)">
            <summary>
            Gets the frontpage of the user
            </summary>
            <param name="reddit">Reddit you're logged into</param>
            <returns>the frontpage of reddit</returns>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.Subscribe">
            <summary>
            Subscribe to a subreddit
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.Unsubscribe">
            <summary>
            Unsubscribes from a subreddit
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.ClearFlairTemplates(RedditSharp.FlairType)">
            <summary>
            Clear templates of specified <see cref="T:RedditSharp.FlairType"/>
            </summary>
            <param name="flairType"><see cref="T:RedditSharp.FlairType"/></param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.AddFlairTemplate(System.String,RedditSharp.FlairType,System.String,System.Boolean)">
            <summary>
            Add a new flair template.
            </summary>
            <param name="cssClass">css class name</param>
            <param name="flairType"><see cref="T:RedditSharp.FlairType"/></param>
            <param name="text">flair text</param>
            <param name="userEditable">set flair user editable</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.GetFlairText(System.String)">
            <summary>
            Get the text of the specified users flair.
            </summary>
            <param name="user">reddit username</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.GetFlairTextAsync(System.String)">
            <summary>
            Get the text of the specified users flair.
            </summary>
            <param name="user">reddit username</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.GetFlairCssClass(System.String)">
            <summary>
            Get the css class of the specified users flair.
            </summary>
            <param name="user">reddit username</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.GetFlairCssClassAsync(System.String)">
            <summary>
            Get the css class of the specified users flair.
            </summary>
            <param name="user">reddit username</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.SetUserFlair(System.String,System.String,System.String)">
            <summary>
            Set a users flair.
            </summary>
            <param name="user">reddit username</param>
            <param name="cssClass">flair css class</param>
            <param name="text">flair text</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.SetUserFlairAsync(System.String,System.String,System.String)">
            <summary>
            Set a users flair.
            </summary>
            <param name="user">reddit username</param>
            <param name="cssClass">flair css class</param>
            <param name="text">flair text</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.UploadHeaderImage(System.String,RedditSharp.ImageType,System.Byte[])">
            <summary>
            Upload a header image.
            </summary>
            <param name="name">name of image.</param>
            <param name="imageType"><see cref="T:RedditSharp.ImageType"/> of image</param>
            <param name="file">image buffer</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.UploadHeaderImageAsync(System.String,RedditSharp.ImageType,System.Byte[])">
            <summary>
            Upload a header image.
            </summary>
            <param name="name">name of image.</param>
            <param name="imageType"><see cref="T:RedditSharp.ImageType"/> of image</param>
            <param name="file">image buffer</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.AddModerator(System.String)">
            <summary>
            Adds a moderator
            </summary>
            <param name="user">User to add, by username</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.AddModerator(RedditSharp.Things.RedditUser)">
            <summary>
            Adds a moderator
            </summary>
            <param name="user">User to add</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.AcceptModeratorInvite">
            <summary>
            Accept invitation to moderate this subreddit.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.RemoveModerator(System.String)">
            <summary>
            Remove a moderator from this subreddit.
            </summary>
            <param name="id">reddit user fullname</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.ToString">
            <inheritdoc/>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.AddContributor(System.String)">
            <summary>
            Add a contributor to this subreddit.
            </summary>
            <param name="user">reddit username.</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.RemoveContributor(System.String)">
            <summary>
            Remove a contributor from this subreddit.
            </summary>
            <param name="id">reddit user full name</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.RemoveContributorAsync(System.String)">
            <summary>
            Remove a contributor from this subreddit.
            </summary>
            <param name="id">reddit user full name</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.BanUser(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Bans a user
            </summary>
            <param name="user">User to ban, by username</param>
            <param name="reason">Reason for ban, shows in ban note as 'reason: note' or just 'note' if blank</param>
            <param name="note">Mod notes about ban, shows in ban note as 'reason: note'</param>
            <param name="duration">Number of days to ban user, 0 for permanent</param>
            <param name="message">Message to include in ban PM</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.BanUserAsync(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Bans a user
            </summary>
            <param name="user">User to ban, by username</param>
            <param name="reason">Reason for ban, shows in ban note as 'reason: note' or just 'note' if blank</param>
            <param name="note">Mod notes about ban, shows in ban note as 'reason: note'</param>
            <param name="duration">Number of days to ban user, 0 for permanent</param>
            <param name="message">Message to include in ban PM</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.BanUser(System.String,System.String)">
            <summary>
            Ban a user by name
            </summary>
            <param name="user">user name</param>
            <param name="note">ban note</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.BanUserAsync(System.String,System.String)">
            <summary>
            Ban a user by name
            </summary>
            <param name="user">user name</param>
            <param name="note">ban note</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.UnBanUser(System.String)">
            <summary>
            Unbans a user
            </summary>
            <param name="user">User to unban, by username</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.UnBanUserAsync(System.String)">
            <summary>
            Unbans a user
            </summary>
            <param name="user">User to unban, by username</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.SubmitPost(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Submits a link post in the current subreddit using the logged-in user
            </summary>
            <param name="title">The title of the submission</param>
            <param name="url">The url of the submission link</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.SubmitPostAsync(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Submits a link post in the current subreddit using the logged-in user
            </summary>
            <param name="title">The title of the submission</param>
            <param name="url">The url of the submission link</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.SubmitTextPost(System.String,System.String,System.String,System.String)">
            <summary>
            Submits a text post in the current subreddit using the logged-in user
            </summary>
            <param name="title">The title of the submission</param>
            <param name="text">The raw markdown text of the submission</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.SubmitTextPostAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Submits a text post in the current subreddit using the logged-in user
            </summary>
            <param name="title">The title of the submission</param>
            <param name="text">The raw markdown text of the submission</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.GetModerationLog">
            <summary>
            Gets the moderation log of the current subreddit
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.GetModerationLog(RedditSharp.ModActionType)">
            <summary>
            Gets the moderation log of the current subreddit filtered by the action taken
            </summary>
            <param name="action">ModActionType of action performed</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.GetModerationLog(System.String[])">
            <summary>
            Gets the moderation log of the current subreddit filtered by moderator(s) who performed the action
            </summary>
            <param name="mods">String array of mods to filter by</param>
        </member>
        <member name="M:RedditSharp.Things.Subreddit.GetModerationLog(RedditSharp.ModActionType,System.String[])">
            <summary>
            Gets the moderation log of the current subreddit filtered by the action taken and moderator(s) who performed the action
            </summary>
            <param name="action">ModActionType of action performed</param>
            <param name="mods">String array of mods to filter by</param>
            <returns></returns>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.CommentStream">
            <summary>
            Infinitely yields new <see cref="T:RedditSharp.Things.Comment"/> posted to the subreddit.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.SubmissionStream">
            <summary>
            Infinitely yields new <see cref="T:RedditSharp.Things.Post"/> made to the subreddit.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Subreddit.ModerationLogStream">
            <summary>
            Infinitely yields new <see cref="T:RedditSharp.Things.ModAction"/> made on the subreddit.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Thing.Shortlink">
            <summary>
            Shortlink to the item
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Thing.Id">
            <summary>
            Base36 id.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Thing.FullName">
            <summary>
            reddit full name.  Kind_Base36 id.  Example.  t1_a1b2c3
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Thing.Kind">
            <summary>
            Thing kind.  t1, t2, t3 etc
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Thing.FetchedAt">
            <summary>
            The time at which this object was fetched from reddit servers.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Thing.TimeSinceFetch">
            <summary>
            Gets the time since last fetch from reddit servers.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.Thing.ParseAsync(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            Parses what it is, based on the t(number) attribute
            </summary>
            <param name="reddit">Reddit you're using</param>
            <param name="json">Json Token</param>
            <param name="webAgent">WebAgent</param>
            <returns>A "Thing", such as a comment, user, post, etc.</returns>
        </member>
        <member name="M:RedditSharp.Things.Thing.Parse(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            Parses what it is, based on the t(number) attribute
            </summary>
            <param name="reddit">Reddit you're using</param>
            <param name="json">Json Token</param>
            <param name="webAgent">WebAgent</param>
            <returns>A "Thing", such as a comment, user, post, etc.</returns>
        </member>
        <member name="M:RedditSharp.Things.Thing.ParseAsync``1(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            Tries to find the "Thing" you are looking for
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reddit"></param>
            <param name="json"></param>
            <param name="webAgent"></param>
            <returns>The "Thing"</returns>
        </member>
        <member name="M:RedditSharp.Things.Thing.Parse``1(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            Tries to find the "Thing" you are looking for
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reddit"></param>
            <param name="json"></param>
            <param name="webAgent"></param>
            <returns>The "Thing"</returns>
        </member>
        <member name="M:RedditSharp.Things.VotableThing.InitAsync(RedditSharp.Reddit,RedditSharp.IWebAgent,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initialize.
            </summary>
            <param name="reddit"></param>
            <param name="webAgent"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Things.VotableThing.Init(RedditSharp.Reddit,RedditSharp.IWebAgent,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initialize.
            </summary>
            <param name="reddit"></param>
            <param name="webAgent"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="P:RedditSharp.Things.VotableThing.Downvotes">
            <summary>
            Number of upvotes on this item.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.VotableThing.Upvotes">
            <summary>
            Number of upvotes on this item.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.VotableThing.Score">
            <summary>
            Current score of this item.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.VotableThing.Saved">
            <summary>
            Returns true if this item is saved.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.VotableThing.Distinguished">
            <summary>
            Returns the distinguish type.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.VotableThing.Liked">
            <summary>
            True if the logged in user has upvoted this.
            False if they have not.
            Null if they have not cast a vote.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.VotableThing.ModReports">
            <summary>
            Returns a list of reports made by moderators.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.VotableThing.UserReports">
            <summary>
            Returns a list of reports made by users.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.VotableThing.Vote">
            <summary>
            Gets or sets the vote for the current VotableThing.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.VotableThing.Upvote">
            <summary>
            Upvotes something
            </summary>
        </member>
        <member name="M:RedditSharp.Things.VotableThing.Downvote">
            <summary>
            Downvote this item.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.VotableThing.SetVote(RedditSharp.Things.VotableThing.VoteType)">
            <summary>
            Vote on this item.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:RedditSharp.Things.VotableThing.Save">
            <summary>
            Save this item.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.VotableThing.Unsave">
            <summary>
            Unsave this item.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.VotableThing.ClearVote">
            <summary>
            Clear you vote on this item.
            </summary>
        </member>
        <member name="M:RedditSharp.Things.VotableThing.Report(RedditSharp.Things.VotableThing.ReportType,System.String)">
            <summary>
            Reports someone
            </summary>
            <param name="reportType">What you're reporting them for <see cref="T:RedditSharp.Things.VotableThing.ReportType"/></param>
            <param name="otherReason">If your reason is "Other", say why you're reporting them</param>
        </member>
        <member name="M:RedditSharp.Things.VotableThing.Distinguish(RedditSharp.Things.VotableThing.DistinguishType)">
            <summary>
            Distingiush a comment
            </summary>
            <param name="distinguishType">Type you want to distinguish <see cref="T:RedditSharp.Things.VotableThing.DistinguishType"/></param>
        </member>
        <member name="P:RedditSharp.Things.Report.Reason">
            <summary>
            Report reason
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Report.ModeratorName">
            <summary>
            Moderator who made the report.  Empty if report was made by
            a regular user.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.Report.Count">
            <summary>
            Number of reports matching <see cref="P:RedditSharp.Things.Report.Reason"/>
            </summary>
        </member>
        <member name="P:RedditSharp.Things.WikiPageRevision.Id">
            <summary>
            Revision id.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.WikiPageRevision.TimeStamp">
            <summary>
            DateTime of the revision.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.WikiPageRevision.Reason">
            <summary>
            Reason for the revision.
            </summary>
        </member>
        <member name="P:RedditSharp.Things.WikiPageRevision.Page">
            <summary>
            Page
            </summary>
        </member>
        <member name="P:RedditSharp.Things.WikiPageRevision.Author">
            <summary>
            User who made the revision.
            </summary>
        </member>
        <member name="M:RedditSharp.ModActionTypeConverter.GetRedditParamName(RedditSharp.ModActionType)">
            <summary>
            Replaces "LockPost" with "lock" since "lock" is a reserved word and can't be used in the enum
            </summary>
            <returns>String representation of enum value recognized by Reddit's api</returns>
        </member>
        <member name="T:RedditSharp.Multi.MData">
            <summary>
            Contains the innner information of the Multi
            </summary>
        </member>
        <member name="P:RedditSharp.Multi.MData.CanEdit">
            <summary>
            Can the Multi be edited
            </summary>
        </member>
        <member name="P:RedditSharp.Multi.MData.DisplayName">
            <summary>
            Display name for the Multi
            </summary>
        </member>
        <member name="P:RedditSharp.Multi.MData.Name">
            <summary>
            Actual name of the Multi
            </summary>
        </member>
        <member name="P:RedditSharp.Multi.MData.DescriptionHTML">
            <summary>
            Description of the Multi in HTML format
            </summary>
        </member>
        <member name="P:RedditSharp.Multi.MData.Created">
            <summary>
            When the multi was created
            </summary>
        </member>
        <member name="P:RedditSharp.Multi.MData.CopiedFrom">
            <summary>
            Where the multi was copied from if it was copied
            </summary>
        </member>
        <member name="P:RedditSharp.Multi.MData.IconUrl">
            <summary>
            URL of the icon to use. 
            </summary>
        </member>
        <member name="P:RedditSharp.Multi.MData.Subreddits">
            <summary>
            List of the Subreddits in the multi
            </summary>
        </member>
        <member name="P:RedditSharp.Multi.MData.CreatedUTC">
            <summary>
            When the multi was created in UTC
            </summary>
        </member>
        <member name="P:RedditSharp.Multi.MData.KeyColor">
            <summary>
            Hex Code of the color for the multi
            </summary>
        </member>
        <member name="P:RedditSharp.Multi.MData.Visibility">
            <summary>
            Visiblity property for the Multi
            </summary>
        </member>
        <member name="P:RedditSharp.Multi.MData.IconName">
            <summary>
            Name of the icon corresponding to the URL
            </summary>
        </member>
        <member name="P:RedditSharp.Multi.MData.WeightingScheme">
            <summary>
            Weighting scheme of the Multi
            </summary>
        </member>
        <member name="P:RedditSharp.Multi.MData.Path">
            <summary>
            Path to navigate to the multi
            </summary>
        </member>
        <member name="P:RedditSharp.Multi.MData.DescriptionMD">
            <summary>
            Description of the multi in text format.
            </summary>
        </member>
        <member name="M:RedditSharp.Multi.MData.#ctor(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent,System.Boolean)">
            <summary>
            Creates a new mData implementation
            </summary>
            <param name="reddit">Reddit object to use</param>
            <param name="json">Token to use with parameters for the different members</param>
            <param name="webAgent">Web Agent to use</param>
            <param name="subs">Whether or not subs exist</param>
        </member>
        <member name="M:RedditSharp.Multi.MData.#ctor">
            <summary>
            Generic Constructor
            </summary>
        </member>
        <member name="M:RedditSharp.Multi.Multi.GetCurrentUsersMultis">
            <summary>
            Retrieve a list of the Multis belonging to the currently authenticated user
            </summary>
            <returns>A List of MultiData containing the authenticated user's Multis</returns>
        </member>
        <member name="M:RedditSharp.Multi.Multi.GetPublicUserMultis(System.String)">
            <summary>
            Retrieve a list of public Multis belonging to a given user
            </summary>
            <param name="username">Username to search</param>
            <returns>A list of MultiData containing the public Multis of the searched user</returns>
        </member>
        <member name="M:RedditSharp.Multi.Multi.GetMultiByPath(System.String)">
            <summary>
            Retrieve the information of a Multi based on the URL path given
            </summary>
            <param name="path">URL path to use</param>
            <returns>A MultiData containing the information for the found Multi</returns>
        </member>
        <member name="M:RedditSharp.Multi.Multi.GetMultiDescription(System.String)">
            <summary>
            Retrieve the description for the Multi based on the URL path given
            </summary>
            <param name="path">URL path to use</param>
            <returns>A MultiData containing the description for the found Multi</returns>
        </member>
        <member name="M:RedditSharp.Multi.Multi.GetSubInformation(System.String,System.String)">
            <summary>
            Retrieve the information for a given subreddit in a Multi
            </summary>
            <param name="path">URL path to use</param>
            <param name="subreddit">Subreddit name to get information for</param>
            <returns>A MultiSubs element containing the information for the searched subreddit</returns>
        </member>
        <member name="M:RedditSharp.Multi.Multi.RenameMulti(System.String,System.String,System.String)">
            <summary>
            Rename a Multi based on the given information
            </summary>
            <param name="displayName">New Display name for the Multi</param>
            <param name="pathFrom">Original URL path of the Multi</param>
            <param name="pathTo">New URL path of the Multi</param>
            <returns>A String containing the new Multi information</returns>
        </member>
        <member name="M:RedditSharp.Multi.Multi.PutSubMulti(System.String,System.String)">
            <summary>
            Adds a Subreddit to the given Multi
            </summary>
            <param name="path">URL Path of the Multi to update</param>
            <param name="subName">Name of the subreddit to add</param>
            <returns>A String containing the information of the updated Multi</returns>
        </member>
        <member name="M:RedditSharp.Multi.Multi.PutMultiDescription(System.String,System.String)">
            <summary>
            Updates the description for a given Multi
            </summary>
            <param name="path">URL path of the Multi to update</param>
            <param name="description">New description for the Multi</param>
            <returns>A string containing the updated information of the Multi</returns>
        </member>
        <member name="M:RedditSharp.Multi.Multi.CopyMulti(System.String,System.String,System.String)">
            <summary>
            Makes a copy of a Multi
            </summary>
            <param name="displayName">Display name for the new Multi</param>
            <param name="pathFrom">URL path to copy from</param>
            <param name="pathTo">URL path to copy to</param>
            <returns>A string containing the information of the new Multi</returns>
        </member>
        <member name="M:RedditSharp.Multi.Multi.DeleteSub(System.String,System.String)">
            <summary>
            Remove a Subreddit from the given Multi
            </summary>
            <param name="path">URL path of the Multi to edit</param>
            <param name="subname">Subreddit name to be removed</param>
            <returns>A string containing the updated information of the given Multi.</returns>
        </member>
        <member name="M:RedditSharp.Multi.Multi.DeleteMulti(System.String)">
            <summary>
            Deletes a Multi
            </summary>
            <param name="path">URL path of the Multi to Delete</param>
            <returns>A string containing the success code for deletion.</returns>
        </member>
        <member name="M:RedditSharp.Multi.Multi.PostMulti(RedditSharp.Multi.MData,System.String)">
            <summary>
            Create a new Multi for the authenticated user
            </summary>
            <param name="description">Multi Description</param>
            <param name="displayname">Multi Display Name</param>
            <param name="iconname">Icon Name (must be one of the default values)</param>
            <param name="keycolor">Hex Code for the desired color</param>
            <param name="subreddits">Array of Subreddit names to add</param>
            <param name="visibility">Visibility state for the Multi</param>
            <param name="weightingscheme">Weighting Scheme for the Multi</param>
            <param name="path">Desired URL path for the Multi</param>
            <returns>A string containing the information for the newly created Multi or a status of (409) if the Multi already exists</returns>
        </member>
        <member name="M:RedditSharp.Multi.Multi.PutMulti(RedditSharp.Multi.MData,System.String)">
            <summary>
            Create or update a  Multi for the authenticated user
            </summary>
            <param name="description">Multi Description</param>
            <param name="displayname">Multi Display Name</param>
            <param name="iconname">Icon Name (must be one of the default values)</param>
            <param name="keycolor">Hex Code for the desired color</param>
            <param name="subreddits">Array of Subreddit names to add</param>
            <param name="visibility">Visibility state for the Multi</param>
            <param name="weightingscheme">Weighting Scheme for the Multi</param>
            <param name="path">Desired URL path for the Multi</param>
            <returns>A string containing the information for the newly created or updated Multi or a status of (409) if the Multi already exists</returns>
        </member>
        <member name="T:RedditSharp.Multi.MultiData">
            <summary>
            Master Multi Class that contains the all of the Multi Data
            </summary>
        </member>
        <member name="P:RedditSharp.Multi.MultiData.Kind">
            <summary>
            Kind of Multi
            </summary>
        </member>
        <member name="P:RedditSharp.Multi.MultiData.Data">
            <summary>
            Internal Model Data of the Multi Class
            </summary>
        </member>
        <member name="M:RedditSharp.Multi.MultiData.#ctor(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent,System.Boolean)">
            <summary>
            Creates an implementation of MultiData
            </summary>
            <param name="reddit">Reddit Object to use</param>
            <param name="json">Json Token containing the information for the Multi</param>
            <param name="webAgent">Web Agent to use</param>
            <param name="subs">Whether there are subs</param>
        </member>
        <member name="T:RedditSharp.Multi.MultiSubs">
            <summary>
            Class to contain the information for a single subreddit in a multi
            </summary>
        </member>
        <member name="P:RedditSharp.Multi.MultiSubs.Name">
            <summary>
            Name of the subreddit
            </summary>
        </member>
        <member name="M:RedditSharp.Multi.MultiSubs.#ctor(RedditSharp.Reddit,Newtonsoft.Json.Linq.JToken,RedditSharp.IWebAgent)">
            <summary>
            Creates a new MultiSubs implementation
            </summary>
            <param name="reddit">Reddit object to use</param>
            <param name="json">Token to use for the name</param>
            <param name="webAgent">Web Agent to implement the creation</param>
        </member>
        <member name="M:RedditSharp.Multi.MultiSubs.#ctor(System.String)">
            <summary>
            Generic Constructor
            </summary>
        </member>
        <member name="M:RedditSharp.AuthProvider.#ctor(System.String,System.String,System.String)">
            <summary>
            Allows use of reddit's OAuth interface, using an app set up at https://ssl.reddit.com/prefs/apps/.
            </summary>
            <param name="clientId">Granted by reddit as part of app.</param>
            <param name="clientSecret">Granted by reddit as part of app.</param>
            <param name="redirectUri">Selected as part of app. Reddit will send users back here.</param>
        </member>
        <member name="M:RedditSharp.AuthProvider.#ctor(System.String,System.String,System.String,RedditSharp.IWebAgent)">
            <summary>
            Allows use of reddit's OAuth interface, using an app set up at https://ssl.reddit.com/prefs/apps/.
            </summary>
            <param name="clientId">Granted by reddit as part of app.</param>
            <param name="clientSecret">Granted by reddit as part of app.</param>
            <param name="redirectUri">Selected as part of app. Reddit will send users back here.</param>
            <param name="agent">Implementation of IWebAgent to use to make requests.</param>
        </member>
        <member name="M:RedditSharp.AuthProvider.GetAuthUrl(System.String,RedditSharp.AuthProvider.Scope,System.Boolean)">
            <summary>
            Creates the reddit OAuth2 Url to redirect the user to for authorization. 
            </summary>
            <param name="state">Used to verify that the user received is the user that was sent</param>
            <param name="scope">Determines what actions can be performed against the user.</param>
            <param name="permanent">Set to true for access lasting longer than one hour.</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.AuthProvider.GetOAuthToken(System.String,System.Boolean)">
            <summary>
            Gets the OAuth token for the user associated with the provided code.
            </summary>
            <param name="code">Sent by reddit as a parameter in the return uri.</param>
            <param name="isRefresh">Set to true for refresh requests.</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.AuthProvider.GetOAuthToken(System.String,System.String)">
            <summary>
            Gets the OAuth token for the user.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The user's password.</param>
            <returns>The access token</returns>
        </member>
        <member name="M:RedditSharp.AuthProvider.RevokeToken(System.String,System.Boolean)">
            <summary>
            revokes an oauth token
            </summary>
            <param name="token">The oauth token..</param>
            <param name="isRefresh">Set to true for refresh token.</param>
            <returns>The access token</returns>
        </member>
        <member name="M:RedditSharp.AuthProvider.GetUser(System.String)">
            <summary>
            Gets a user authenticated by OAuth2.
            </summary>
            <param name="accessToken">Obtained using GetOAuthToken</param>
            <returns></returns>
        </member>
        <member name="F:RedditSharp.Captcha.Id">
            <summary>
            Captcha Id.
            </summary>
        </member>
        <member name="F:RedditSharp.Captcha.Url">
            <summary>
            Captcha url.
            </summary>
        </member>
        <member name="F:RedditSharp.CaptchaResponse.Answer">
            <summary>
            Captcha answer.
            </summary>
        </member>
        <member name="P:RedditSharp.CaptchaResponse.Cancel">
            <summary>
            Set to true to cancel.
            </summary>
        </member>
        <member name="T:RedditSharp.DuplicateLinkException">
            <summary>
            Exception that gets thrown if you try and submit a duplicate link to a SubReddit
            </summary>
        </member>
        <member name="P:RedditSharp.LinkData.Extension">
            <summary>
            Used for redirects.
            </summary>
        </member>
        <member name="P:RedditSharp.LinkData.URL">
            <summary>
            Url of the link.
            </summary>
        </member>
        <member name="F:RedditSharp.Listing`1.DefaultListingPerRequest">
            <summary>
            Gets the default number of listings returned per request
            </summary>
        </member>
        <member name="M:RedditSharp.Listing`1.#ctor(RedditSharp.Reddit,System.String,RedditSharp.IWebAgent)">
            <summary>
            Creates a new Listing instance
            </summary>
            <param name="reddit"></param>
            <param name="url"></param>
            <param name="webAgent"></param>
        </member>
        <member name="M:RedditSharp.Listing`1.GetEnumerator(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns an enumerator that iterates through a collection, using the specified number of listings per
            request and optionally the maximum number of listings
            </summary>
            <param name="limitPerRequest">The number of listings to be returned per request</param>
            <param name="maximumLimit">The maximum number of listings to return</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Listing`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection, using the default number of listings per request
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Listing`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Listing`1.GetListing(System.Int32)">
            <summary>
            Returns an IEnumerable instance which will return the specified maximum number of listings
            </summary>
            <param name="maximumLimit"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Listing`1.GetListing(System.Int32,System.Int32)">
            <summary>
            Returns an IEnumerable instance which will return the specified maximum number of listings
            with the limited number per request
            </summary>
            <param name="maximumLimit"></param>
            <param name="limitPerRequest"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Listing`1.GetListingStream(System.Int32,System.Int32)">
            <summary>
            Returns an IEnumerable instance which will infinitely yield new <see cref="T:RedditSharp.Things.Thing"/> 
            </summary>
            <param name="limitPerRequest">
              Number of records to return in each request to the reddit api.  Defaults to using the reddit
              standard of 25 records of requests.
              Adjusting this up or down based on the size of your subreddit and the rate at which new content
              is created.
            </param>
            <param name="maximumLimit">maximum number of records to return</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Listing`1.GetEnumerator(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Converts an IEnumerator instance to an IEnumerable
            </summary>
            <param name="enumerator"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Listing`1.ListingEnumerator`1.#ctor(RedditSharp.Listing{`1},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new ListingEnumerator instance
            </summary>
            <param name="listing"></param>
            <param name="limitPerRequest">The number of listings to be returned per request. -1 will exclude this parameter and use the Reddit default (25)</param>
            <param name="maximumLimit">The maximum number of listings to return, -1 will not add a limit</param>
            <param name="stream">yield new <see cref="T:RedditSharp.Things.Thing"/> as they are created</param>
        </member>
        <member name="M:RedditSharp.Listing`1.ListingEnumerator`1.PageBack">
            <summary>
            Standard behavior.  Page from newest to oldest - "backward" in time.
            </summary>
        </member>
        <member name="M:RedditSharp.Listing`1.ListingEnumerator`1.PageForward">
            <summary>
            Page from oldest to newest - "forward" in time.
            </summary>
        </member>
        <member name="F:RedditSharp.ModeratorPermission.None">
            <summary>
            No permissions.
            </summary>
        </member>
        <member name="F:RedditSharp.ModeratorPermission.Access">
            <summary>
            access permissions.
            </summary>
        </member>
        <member name="F:RedditSharp.ModeratorPermission.Config">
            <summary>
            Subreddit config.
            </summary>
        </member>
        <member name="F:RedditSharp.ModeratorPermission.Flair">
            <summary>
            Flair management.
            </summary>
        </member>
        <member name="F:RedditSharp.ModeratorPermission.Mail">
            <summary>
            Modmail.
            </summary>
        </member>
        <member name="F:RedditSharp.ModeratorPermission.Posts">
            <summary>
            Moderate posts.
            </summary>
        </member>
        <member name="F:RedditSharp.ModeratorPermission.Wiki">
            <summary>
            Edit / view protected wiki paes.
            </summary>
        </member>
        <member name="F:RedditSharp.ModeratorPermission.All">
            <summary>
            All permissions.
            </summary>
        </member>
        <member name="P:RedditSharp.ModeratorUser.Name">
            <summary>
            Moderator username.
            </summary>
        </member>
        <member name="P:RedditSharp.ModeratorUser.Id">
            <summary>
            base36 Id of the moderator.
            </summary>
        </member>
        <member name="P:RedditSharp.ModeratorUser.Permissions">
            <summary>
            Permissions the moderator has in the subreddit.
            </summary>
        </member>
        <member name="M:RedditSharp.ModeratorUser.ToString">
            <inheritdoc/>
        </member>
        <member name="T:RedditSharp.Reddit">
            <summary>
            Class to communicate with Reddit.com
            </summary>
        </member>
        <member name="F:RedditSharp.Reddit.CaptchaSolver">
            <summary>
            Captcha solver instance to use when solving captchas.
            </summary>
        </member>
        <member name="P:RedditSharp.Reddit.User">
            <summary>
            The authenticated user for this instance.
            </summary>
        </member>
        <member name="P:RedditSharp.Reddit.RateLimit">
            <summary>
            Sets the Rate Limiting Mode of the underlying WebAgent
            </summary>
        </member>
        <member name="P:RedditSharp.Reddit.FrontPage">
            <summary>
            Gets the FrontPage using the current Reddit instance.
            </summary>
        </member>
        <member name="P:RedditSharp.Reddit.RSlashAll">
            <summary>
            Gets /r/All using the current Reddit instance.
            </summary>
        </member>
        <member name="M:RedditSharp.Reddit.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:RedditSharp.Reddit.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:RedditSharp.Reddit.#ctor(RedditSharp.WebAgent.RateLimitMode,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="limitMode">Rate limit</param>
            <param name="useSsl">use ssl.  Defaults to true.</param>
        </member>
        <member name="M:RedditSharp.Reddit.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            DEPRECATED: Avoid use as Reddit will be removing this option eventually
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="useSsl"></param>
        </member>
        <member name="M:RedditSharp.Reddit.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="accessToken">oauth access token.</param>
        </member>
        <member name="M:RedditSharp.Reddit.#ctor(RedditSharp.IWebAgent)">
            <summary>
            Creates a Reddit instance with the given WebAgent implementation
            </summary>
            <param name="agent">Implementation of IWebAgent interface. Used to generate requests.</param>
        </member>
        <member name="M:RedditSharp.Reddit.#ctor(RedditSharp.IWebAgent,System.Boolean)">
            <summary>
            Creates a Reddit instance with the given WebAgent implementation
            </summary>
            <param name="agent">Implementation of IWebAgent interface. Used to generate requests.</param>
            <param name="initUser">Whether to run InitOrUpdateUser, requires <paramref name="agent"/> to have credentials first.</param>
        </member>
        <member name="M:RedditSharp.Reddit.LogIn(System.String,System.String,System.Boolean)">
            <summary>
            Logs in the current Reddit instance. DEPRECATED
            </summary>
            <param name="username">The username of the user to log on to.</param>
            <param name="password">The password of the user to log on to.</param>
            <param name="useSsl">Whether to use SSL or not. (default: true)</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Reddit.GetUser(System.String)">
            <summary>
            Get a reddit user by name.
            </summary>
            <param name="name">user name</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Reddit.InitOrUpdateUser">
            <summary>
            Initializes the User property if it's null,
            otherwise replaces the existing user object
            with a new one fetched from reddit servers.
            </summary>
        </member>
        <member name="M:RedditSharp.Reddit.GetSubreddit(System.String)">
            <summary>
            Get a subreddit by name.
            </summary>
            <param name="name">subreddit name with or without preceding /r/</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Reddit.GetSubredditAsync(System.String)">
            <summary>
            Get a subreddit by name.
            </summary>
            <param name="name">subreddit name with or without preceding /r/</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Reddit.GetDomain(System.String)">
            <summary>
            Get information about a domain.
            </summary>
            <param name="domain">domain name</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Reddit.GetToken(System.Uri,System.Boolean)">
            <summary>
            Get a <see cref="T:Newtonsoft.Json.Linq.JToken"/> from a url.
            </summary>
            <param name="uri">uri to fetch</param>
            <param name="isLive">bool indicating if it's a live thread or not</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Reddit.GetPost(System.Uri)">
            <summary>
            Get a <see cref="T:RedditSharp.Things.Post"/> by uri.
            </summary>
            <param name="uri">uri to fetch</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Reddit.CreateLiveEvent(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create a Reddit Live thread.
            </summary>
            <param name="title">Required.</param>
            <param name="description">Required</param>
            <param name="resources"></param>
            <param name="nsfw"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Reddit.GetLiveEvent(System.Uri)">
            <summary>
            Get a reddit live thread.
            </summary>
            <param name="uri">Uri of the live thread.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:RedditSharp.Reddit.ComposePrivateMessage(System.String,System.String,System.String,System.String,System.String,System.String)" -->
        <member name="M:RedditSharp.Reddit.RegisterAccount(System.String,System.String,System.String)">
            <summary>
            Registers a new Reddit user
            </summary>
            <param name="userName">The username for the new account.</param>
            <param name="passwd">The password for the new account.</param>
            <param name="email">The optional recovery email for the new account.</param>
            <returns>The newly created user account</returns>
        </member>
        <member name="M:RedditSharp.Reddit.GetThingByFullname(System.String)">
            <summary>
            Get a <see cref="T:RedditSharp.Things.Thing"/> by full name.
            </summary>
            <param name="fullname"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Reddit.GetComment(System.String,System.String,System.String)">
            <summary>
            Get a <see cref="T:RedditSharp.Things.Comment"/>.
            </summary>
            <param name="subreddit">subreddit name in which the comment resides</param>
            <param name="name">comment base36 id</param>
            <param name="linkName">post base36 id</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Reddit.GetComment(System.Uri)">
            <summary>
            Get a <see cref="T:RedditSharp.Things.Comment"/>.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Reddit.SearchByUrl``1(System.String)">
            <summary>
            Return a <see cref="T:RedditSharp.Listing`1"/> of items matching url search.
            </summary>
            <typeparam name="T"><see cref="T:RedditSharp.Things.Thing"/></typeparam>
            <param name="url">query url</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Reddit.Search``1(System.String,RedditSharp.Sorting,RedditSharp.TimeSorting)">
            <summary>
            Return a <see cref="T:RedditSharp.Listing`1"/> of items matching search.
            </summary>
            <typeparam name="T"><see cref="T:RedditSharp.Things.Thing"/></typeparam>
            <param name="query">string to query</param>
            <param name="sortE">Order by <see cref="T:RedditSharp.Sorting"/></param>
            <param name="timeE">Order by <see cref="T:RedditSharp.TimeSorting"/></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Reddit.SearchByTimestamp``1(System.DateTime,System.DateTime,System.String,System.String,RedditSharp.Sorting,RedditSharp.TimeSorting)">
            <summary>
            Return a <see cref="T:RedditSharp.Listing`1"/> of items matching search with a given time period.
            </summary>
            <typeparam name="T"><see cref="T:RedditSharp.Things.Thing"/></typeparam>
            <param name="from">DateTime from</param>
            <param name="to">DateTime to</param>
            <param name="query">string to query</param>
            <param name="subreddit">subreddit in which to search</param>
            <param name="sortE">Order by <see cref="T:RedditSharp.Sorting"/></param>
            <param name="timeE">Order by <see cref="T:RedditSharp.TimeSorting"/></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Reddit.GetNewSubreddits">
            <summary>
            Returns a Listing of newly created subreddits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Reddit.GetPopularSubreddits">
            <summary>
            Returns a Listing of the most popular subreddits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Reddit.GetGoldSubreddits">
            <summary>
            Returns a Listing of Gold-only subreddits. This endpoint will not return anything if the authenticated Reddit account does not currently have gold.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Reddit.GetDefaultSubreddits">
            <summary>
            Returns the Listing of default subreddits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Reddit.SearchSubreddits(System.String)">
            <summary>
            Returns the Listing of subreddits related to a query.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedditSharp.RedditException">
            <summary>
            Represents an error that occurred during accessing or manipulating data on Reddit.
            </summary>
        </member>
        <member name="M:RedditSharp.RedditException.#ctor">
            <summary>
            Initializes a new instance of the RedditException class.
            </summary>
        </member>
        <member name="M:RedditSharp.RedditException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RedditException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:RedditSharp.RedditException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the RedditException class with a specified error message and
            a referenced inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null
            reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:RedditSharp.RedditException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the RedditException class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the
            serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name
            is null or System.Exception.HResult is zero (0).</exception>
        </member>
        <member name="P:RedditSharp.SubmitData.APIType">
            <summary>
            Should be set to "json"
            </summary>
        </member>
        <member name="P:RedditSharp.SubmitData.Kind">
            <summary>
            One of "link", "self" or "image"
            </summary>
        </member>
        <member name="P:RedditSharp.SubmitData.Subreddit">
            <summary>
            Name of the subreddit to which you are submitting.
            </summary>
        </member>
        <member name="P:RedditSharp.SubmitData.UserHash">
            <summary>
            Logged in users modhash.
            </summary>
        </member>
        <member name="P:RedditSharp.SubmitData.Title">
            <summary>
            Title of the submission.  Maximum 300 characters.
            </summary>
        </member>
        <member name="P:RedditSharp.SubmitData.Iden">
            <summary>
            Captcha ident.
            </summary>
        </member>
        <member name="P:RedditSharp.SubmitData.Captcha">
            <summary>
            Captcha.
            </summary>
        </member>
        <member name="P:RedditSharp.SubmitData.Resubmit">
            <summary>
            If a link with the same URL has already been submitted to the specified
            subreddit an error will be returned unless resubmit is true.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditImage.CssLink">
            <summary>
            css link.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditImage.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditImage.Url">
            <summary>
            Url.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditImage.SubredditStyle">
            <summary>
            Subreddit style.
            </summary>
        </member>
        <member name="M:RedditSharp.SubredditImage.Delete">
            <summary>
            Delete this subreddit image.
            </summary>
        </member>
        <member name="M:RedditSharp.SubredditImage.DeleteAsync">
            <summary>
            Delete this subreddit image.
            </summary>
            <returns></returns>
        </member>
        <member name="P:RedditSharp.SubredditSettings.Subreddit">
            <summary>
            Parent subreddit.
            </summary>
        </member>
        <member name="M:RedditSharp.SubredditSettings.#ctor(RedditSharp.Things.Subreddit,RedditSharp.Reddit,Newtonsoft.Json.Linq.JObject,RedditSharp.IWebAgent)">
            <summary>
            Get the subreddit settings page.
            </summary>
            <param name="subreddit">A subreddit.</param>
            <param name="reddit"></param>
            <param name="json"></param>
            <param name="webAgent"></param>
        </member>
        <member name="P:RedditSharp.SubredditSettings.AllowAsDefault">
            <summary>
            Allow this subreddit to be included /r/all as well as the default and trending lists.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditSettings.Domain">
            <summary>
            Domain.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditSettings.Sidebar">
            <summary>
            Markdown of the sidebar.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditSettings.Language">
            <summary>
            A valid IETF language tag (underscore supported).
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditSettings.Title">
            <summary>
            Subreddit title.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditSettings.WikiEditKarma">
            <summary>
            Subreddit karma required to edit and create wiki pages.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditSettings.UseDomainCss">
            <summary>
            Set to true to use domain css.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditSettings.UseDomainSidebar">
            <summary>
            Set to true to use domain sidebar.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditSettings.HeaderHoverText">
            <summary>
            Header hover text.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditSettings.NSFW">
            <summary>
            Viewers must be over eighteen years old
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditSettings.PublicDescription">
            <summary>
            Public description text.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditSettings.WikiEditMode">
            <summary>
            Wiki edit mode.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditSettings.SubredditType">
            <summary>
            Subreddit type.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditSettings.ShowThumbnails">
            <summary>
            Set to true to show thumbnail images of content.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditSettings.WikiEditAge">
            <summary>
            Account age (days) required to edit and create wiki pages.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditSettings.ContentOptions">
            <summary>
            Content options.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditSettings.SpamFilter">
            <summary>
            Spam filter settings.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditSettings.AllowImages">
            <summary>
            Set to bool to allow images 
            </summary>
        </member>
        <member name="M:RedditSharp.SubredditSettings.UpdateSettings">
            <summary>
            Update the subreddit settings.
            </summary>
        </member>
        <member name="M:RedditSharp.SubredditSettings.ResetHeaderImage">
            <summary>
            Resets the subreddit's header image to the Reddit logo
            </summary>
        </member>
        <member name="F:RedditSharp.WikiEditMode.None">
            <summary>
            Wiki is disabled for all users except mods.
            </summary>
        </member>
        <member name="F:RedditSharp.WikiEditMode.Moderators">
            <summary>
            Only mods, approved wiki contributors, or those on a page's edit list may edit.
            </summary>
        </member>
        <member name="F:RedditSharp.WikiEditMode.All">
            <summary>
            Anyone who can submit to the subreddit may edit.
            </summary>
        </member>
        <member name="F:RedditSharp.SubredditType.Public">
            <summary>
            Anyone can view and submit.
            </summary>
        </member>
        <member name="F:RedditSharp.SubredditType.Restricted">
            <summary>
            Anyone can view, but only some are approved to submit links.
            </summary>
        </member>
        <member name="F:RedditSharp.SubredditType.Private">
            <summary>
            Only approved members can view and submit.
            </summary>
        </member>
        <member name="F:RedditSharp.ContentOptions.All">
            <summary>
            Any link type is allowed to be submitted.
            </summary>
        </member>
        <member name="F:RedditSharp.ContentOptions.LinkOnly">
            <summary>
            Only links to external sites are allowed to be submitted.
            </summary>
        </member>
        <member name="F:RedditSharp.ContentOptions.SelfOnly">
            <summary>
            Only text/self posts are allowed to be submitted.
            </summary>
        </member>
        <member name="F:RedditSharp.SpamFilterStrength.Low">
            <summary>
            Low disables most filtering.
            </summary>
        </member>
        <member name="F:RedditSharp.SpamFilterStrength.High">
            <summary>
            High is the standard filter.
            </summary>
        </member>
        <member name="F:RedditSharp.SpamFilterStrength.All">
            <summary>
            Filter every post initially and they will need to be approved manually to be visible.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditStyle.CSS">
            <summary>
            Subreddit stylesheet.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditStyle.Images">
            <summary>
            List of images for the stylesheet.
            </summary>
        </member>
        <member name="P:RedditSharp.SubredditStyle.Subreddit">
            <summary>
            Subreddit.
            </summary>
        </member>
        <member name="M:RedditSharp.SubredditStyle.UpdateCss">
            <summary>
            Update the css.
            </summary>
        </member>
        <member name="M:RedditSharp.SubredditStyle.UploadImage(System.String,RedditSharp.ImageType,System.Byte[])">
            <summary>
            Upload an image to reddit.
            </summary>
            <param name="name">name of image.</param>
            <param name="imageType"><see cref="T:RedditSharp.ImageType"/> of image</param>
            <param name="file">image buffer</param>
        </member>
        <member name="P:RedditSharp.TextData.Text">
            <summary>
            Markdown text of the self post.
            </summary>
        </member>
        <member name="P:RedditSharp.WebAgent.UserAgent">
            <summary>
            Additional values to append to the default RedditSharp user agent.
            </summary>
        </member>
        <member name="P:RedditSharp.WebAgent.EnableRateLimit">
            <summary>
            It is strongly advised that you leave this enabled. Reddit bans excessive
            requests with extreme predjudice.
            </summary>
        </member>
        <member name="P:RedditSharp.WebAgent.Protocol">
            <summary>
            web protocol "http", "https"
            </summary>
        </member>
        <member name="P:RedditSharp.WebAgent.RateLimit">
            <summary>
            It is strongly advised that you leave this set to Burst or Pace. Reddit bans excessive
            requests with extreme predjudice.
            </summary>
        </member>
        <member name="T:RedditSharp.WebAgent.RateLimitMode">
            <summary>
            The method by which the WebAgent will limit request rate
            </summary>
        </member>
        <member name="F:RedditSharp.WebAgent.RateLimitMode.Pace">
            <summary>
            Limits requests to one every two seconds (one if OAuth)
            </summary>
        </member>
        <member name="F:RedditSharp.WebAgent.RateLimitMode.SmallBurst">
            <summary>
            Restricts requests to five per ten seconds (ten if OAuth)
            </summary>
        </member>
        <member name="F:RedditSharp.WebAgent.RateLimitMode.Burst">
            <summary>
            Restricts requests to thirty per minute (sixty if OAuth)
            </summary>
        </member>
        <member name="F:RedditSharp.WebAgent.RateLimitMode.None">
            <summary>
            Does not restrict request rate. ***NOT RECOMMENDED***
            </summary>
        </member>
        <member name="P:RedditSharp.WebAgent.RootDomain">
            <summary>
            The root domain RedditSharp uses to address Reddit.
            www.reddit.com by default
            </summary>
        </member>
        <member name="P:RedditSharp.WebAgent.AccessToken">
            <summary>
            Used to make calls against Reddit's API using OAuth2
            </summary>
        </member>
        <member name="P:RedditSharp.WebAgent.LastRequest">
            <summary>
            UTC DateTime of last request made to Reddit API
            </summary>
        </member>
        <member name="P:RedditSharp.WebAgent.BurstStart">
            <summary>
            UTC DateTime of when the last burst started
            </summary>
        </member>
        <member name="P:RedditSharp.WebAgent.RequestsThisBurst">
            <summary>
            Number of requests made during the current burst 
            </summary>
        </member>
        <member name="M:RedditSharp.WebAgent.CreateAndExecuteRequest(System.String)">
            <summary>
            Execute a request and return a <see cref="T:Newtonsoft.Json.Linq.JToken"/>
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.WebAgent.ExecuteRequest(System.Net.HttpWebRequest)">
            <summary>
            Executes the web request and handles errors in the response
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.WebAgent.EnforceRateLimit">
            <summary>
            Enforce the api throttle.
            </summary>
        </member>
        <member name="M:RedditSharp.WebAgent.CreateRequest(System.String,System.String)">
            <summary>
            Create a <see cref="T:System.Net.HttpWebRequest"/>
            </summary>
            <param name="url">target  uri</param>
            <param name="method">http method</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.WebAgent.CreateRequest(System.Uri,System.String)">
            <summary>
            Create a <see cref="T:System.Net.HttpWebRequest"/>
            </summary>
            <param name="uri">target  uri</param>
            <param name="method">http method</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.WebAgent.CreateGet(System.String)">
            <summary>
            Create a http GET <see cref="T:System.Net.HttpWebRequest"/>
            </summary>
            <param name="url">target url</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.WebAgent.CreateGet(System.Uri)">
            <summary>
            Create a http GET <see cref="T:System.Net.HttpWebRequest"/>
            </summary>
            <param name="url">target uri</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.WebAgent.CreatePost(System.String)">
            <summary>
            Create a http POST <see cref="T:System.Net.HttpWebRequest"/>
            </summary>
            <param name="url">target url</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.WebAgent.CreatePut(System.String)">
            <summary>
            Create a http PUT <see cref="T:System.Net.HttpWebRequest"/>
            </summary>
            <param name="url">target url</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.WebAgent.CreateDelete(System.String)">
            <summary>
            Create a http DELETE <see cref="T:System.Net.HttpWebRequest"/>
            </summary>
            <param name="url">target url</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.WebAgent.GetResponseString(System.IO.Stream)">
            <summary>
            Read a string from a stream.
            </summary>
            <param name="stream">response stream</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.WebAgent.WritePostBody(System.IO.Stream,System.Object,System.String[])">
            <summary>
            Write an object to a stream.
            </summary>
            <param name="stream">output stream</param>
            <param name="data">input object</param>
            <param name="additionalFields">additional fields to write</param>
        </member>
        <member name="P:RedditSharp.Wiki.PageNames">
            <summary>
            Get a list of wiki page names for this subreddit.
            </summary>
        </member>
        <member name="P:RedditSharp.Wiki.Revisions">
            <summary>
            Get a list of revisions for this wiki.
            </summary>
        </member>
        <member name="M:RedditSharp.Wiki.GetPage(System.String,System.String)">
            <summary>
            Get a wiki page
            </summary>
            <param name="page">wiki page name</param>
            <param name="version">page version</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Wiki.GetPageSettings(System.String)">
            <summary>
            Get wiki settings for specified wiki page.
            </summary>
            <param name="name">wiki page</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Wiki.SetPageSettings(System.String,RedditSharp.WikiPageSettings)">
            <summary>
            Set settings for the specified wiki page.
            </summary>
            <param name="name">wiki page</param>
            <param name="settings">settings</param>
        </member>
        <member name="M:RedditSharp.Wiki.GetPageRevisions(System.String)">
            <summary>
            Get a list of revisions for a give wiki page.
            </summary>
            <param name="page">wiki page</param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Wiki.GetPageDiscussions(System.String)">
            <summary>
            Get a list of discussions about this wiki page.
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:RedditSharp.Wiki.EditPage(System.String,System.String,System.String,System.String)">
            <summary>
            Edit a wiki page.
            </summary>
            <param name="page">wiki page</param>
            <param name="content">new content</param>
            <param name="previous">previous</param>
            <param name="reason">reason for edit</param>
        </member>
        <member name="M:RedditSharp.Wiki.HidePage(System.String,System.String)">
            <summary>
            Hide the specified wiki page.
            </summary>
            <param name="page">wiki page.</param>
            <param name="revision">reason for revision.</param>
        </member>
        <member name="M:RedditSharp.Wiki.RevertPage(System.String,System.String)">
            <summary>
            Revert a page to a specific version.
            </summary>
            <param name="page">wiki page</param>
            <param name="revision">page version</param>
        </member>
        <member name="M:RedditSharp.Wiki.SetPageEditor(System.String,System.String,System.Boolean)">
            <summary>
            Set the page editor for a given page.
            </summary>
            <param name="page">wiki page</param>
            <param name="username"></param>
            <param name="allow"></param>
        </member>
        <member name="P:RedditSharp.WikiPage.MayRevise">
            <summary>
            May revise.
            </summary>
        </member>
        <member name="P:RedditSharp.WikiPage.RevisionDate">
            <summary>
            Revision date.
            </summary>
        </member>
        <member name="P:RedditSharp.WikiPage.HtmlContent">
            <summary>
            Content of the page.
            </summary>
        </member>
        <member name="P:RedditSharp.WikiPage.MarkdownContent">
            <summary>
            Markdown content of the page.
            </summary>
        </member>
        <member name="P:RedditSharp.WikiPage.RevisionBy">
            <summary>
            Lst revision by this user.
            </summary>
        </member>
        <member name="P:RedditSharp.Domain.Name">
            <summary>
            Domain name
            </summary>
        </member>
        <member name="P:RedditSharp.Domain.Posts">
            <summary>
            Get a <see cref="T:RedditSharp.Listing`1"/> of posts made for this domain.
            </summary>
        </member>
        <member name="P:RedditSharp.Domain.New">
            <summary>
            Get a <see cref="T:RedditSharp.Listing`1"/> of posts made for this domain that are in the new queue.
            </summary>
        </member>
        <member name="P:RedditSharp.Domain.Hot">
            <summary>
            Get a <see cref="T:RedditSharp.Listing`1"/> of posts made for this domain that are in the hot queue.
            </summary>
        </member>
        <member name="M:RedditSharp.Domain.ToString">
            <inheritdoc/>
        </member>
    </members>
</doc>
